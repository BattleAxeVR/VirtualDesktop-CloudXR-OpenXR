// MIT License
//
// Copyright(c) 2022 Matthieu Bucchianeri
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this softwareand associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and /or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright noticeand this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include "pch.h"

#include "runtime.h"
#include "log.h"

namespace {

    using namespace pimax_openxr;
    using namespace pimax_openxr::log;

    class OpenXrRuntime : public OpenXrApi {
      public:
        OpenXrRuntime() = default;

        virtual ~OpenXrRuntime() {
        }

        XrResult xrGetInstanceProcAddr(XrInstance instance, const char* name, PFN_xrVoidFunction* function) override {
            const std::string apiName(name);
            XrResult result;

            // TODO: This should be auto-generated by the dispatch layer, but today our generator only looks at core
            // spec.
            if (apiName == "xrGetD3D11GraphicsRequirementsKHR") {
                *function = reinterpret_cast<PFN_xrVoidFunction>(_xrGetD3D11GraphicsRequirementsKHR);
            } else {
                result = OpenXrApi::xrGetInstanceProcAddr(instance, name, function);
            }
            return result;
        }

        //
        // Instance management.
        //

        XrResult xrEnumerateInstanceExtensionProperties(const char* layerName,
                                                        uint32_t propertyCapacityInput,
                                                        uint32_t* propertyCountOutput,
                                                        XrExtensionProperties* properties) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrCreateInstance(const XrInstanceCreateInfo* createInfo, XrInstance* instance) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrDestroyInstance(XrInstance instance) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrGetInstanceProperties(XrInstance instance, XrInstanceProperties* instanceProperties) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrPollEvent(XrInstance instance, XrEventDataBuffer* eventData) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrGetSystem(XrInstance instance, const XrSystemGetInfo* getInfo, XrSystemId* systemId) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrGetSystemProperties(XrInstance instance,
                                       XrSystemId systemId,
                                       XrSystemProperties* properties) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrEnumerateEnvironmentBlendModes(XrInstance instance,
                                                  XrSystemId systemId,
                                                  XrViewConfigurationType viewConfigurationType,
                                                  uint32_t environmentBlendModeCapacityInput,
                                                  uint32_t* environmentBlendModeCountOutput,
                                                  XrEnvironmentBlendMode* environmentBlendModes) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        //
        // Graphics API management.
        //

        XrResult xrGetD3D11GraphicsRequirementsKHR(XrInstance instance,
                                                   XrSystemId systemId,
                                                   XrGraphicsRequirementsD3D11KHR* graphicsRequirements) {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        //
        // Session management.
        //

        XrResult xrCreateSession(XrInstance instance,
                                 const XrSessionCreateInfo* createInfo,
                                 XrSession* session) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrDestroySession(XrSession session) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrBeginSession(XrSession session, const XrSessionBeginInfo* beginInfo) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrEndSession(XrSession session) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrRequestExitSession(XrSession session) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        //
        // Spaces management.
        //

        XrResult xrEnumerateReferenceSpaces(XrSession session,
                                            uint32_t spaceCapacityInput,
                                            uint32_t* spaceCountOutput,
                                            XrReferenceSpaceType* spaces) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrCreateReferenceSpace(XrSession session,
                                        const XrReferenceSpaceCreateInfo* createInfo,
                                        XrSpace* space) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrGetReferenceSpaceBoundsRect(XrSession session,
                                               XrReferenceSpaceType referenceSpaceType,
                                               XrExtent2Df* bounds) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrCreateActionSpace(XrSession session,
                                     const XrActionSpaceCreateInfo* createInfo,
                                     XrSpace* space) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrLocateSpace(XrSpace space, XrSpace baseSpace, XrTime time, XrSpaceLocation* location) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrDestroySpace(XrSpace space) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        //
        // Views and swapchains management.
        //

        XrResult xrEnumerateViewConfigurations(XrInstance instance,
                                               XrSystemId systemId,
                                               uint32_t viewConfigurationTypeCapacityInput,
                                               uint32_t* viewConfigurationTypeCountOutput,
                                               XrViewConfigurationType* viewConfigurationTypes) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrGetViewConfigurationProperties(XrInstance instance,
                                                  XrSystemId systemId,
                                                  XrViewConfigurationType viewConfigurationType,
                                                  XrViewConfigurationProperties* configurationProperties) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrEnumerateViewConfigurationViews(XrInstance instance,
                                                   XrSystemId systemId,
                                                   XrViewConfigurationType viewConfigurationType,
                                                   uint32_t viewCapacityInput,
                                                   uint32_t* viewCountOutput,
                                                   XrViewConfigurationView* views) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrEnumerateSwapchainFormats(XrSession session,
                                             uint32_t formatCapacityInput,
                                             uint32_t* formatCountOutput,
                                             int64_t* formats) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrCreateSwapchain(XrSession session,
                                   const XrSwapchainCreateInfo* createInfo,
                                   XrSwapchain* swapchain) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrDestroySwapchain(XrSwapchain swapchain) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrEnumerateSwapchainImages(XrSwapchain swapchain,
                                            uint32_t imageCapacityInput,
                                            uint32_t* imageCountOutput,
                                            XrSwapchainImageBaseHeader* images) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrAcquireSwapchainImage(XrSwapchain swapchain,
                                         const XrSwapchainImageAcquireInfo* acquireInfo,
                                         uint32_t* index) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrWaitSwapchainImage(XrSwapchain swapchain, const XrSwapchainImageWaitInfo* waitInfo) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrReleaseSwapchainImage(XrSwapchain swapchain,
                                         const XrSwapchainImageReleaseInfo* releaseInfo) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        //
        // Frame management.
        //

        XrResult xrWaitFrame(XrSession session,
                             const XrFrameWaitInfo* frameWaitInfo,
                             XrFrameState* frameState) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrBeginFrame(XrSession session, const XrFrameBeginInfo* frameBeginInfo) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrEndFrame(XrSession session, const XrFrameEndInfo* frameEndInfo) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrLocateViews(XrSession session,
                               const XrViewLocateInfo* viewLocateInfo,
                               XrViewState* viewState,
                               uint32_t viewCapacityInput,
                               uint32_t* viewCountOutput,
                               XrView* views) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        //
        // Utilities.
        //

        XrResult xrStringToPath(XrInstance instance, const char* pathString, XrPath* path) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrPathToString(XrInstance instance,
                                XrPath path,
                                uint32_t bufferCapacityInput,
                                uint32_t* bufferCountOutput,
                                char* buffer) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        //
        // Actions management (not supported).
        //

        XrResult xrCreateActionSet(XrInstance instance,
                                   const XrActionSetCreateInfo* createInfo,
                                   XrActionSet* actionSet) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrDestroyActionSet(XrActionSet actionSet) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrCreateAction(XrActionSet actionSet,
                                const XrActionCreateInfo* createInfo,
                                XrAction* action) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrDestroyAction(XrAction action) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrSuggestInteractionProfileBindings(
            XrInstance instance, const XrInteractionProfileSuggestedBinding* suggestedBindings) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrAttachSessionActionSets(XrSession session,
                                           const XrSessionActionSetsAttachInfo* attachInfo) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrGetCurrentInteractionProfile(XrSession session,
                                                XrPath topLevelUserPath,
                                                XrInteractionProfileState* interactionProfile) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrGetActionStateBoolean(XrSession session,
                                         const XrActionStateGetInfo* getInfo,
                                         XrActionStateBoolean* state) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrGetActionStateFloat(XrSession session,
                                       const XrActionStateGetInfo* getInfo,
                                       XrActionStateFloat* state) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrGetActionStateVector2f(XrSession session,
                                          const XrActionStateGetInfo* getInfo,
                                          XrActionStateVector2f* state) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrGetActionStatePose(XrSession session,
                                      const XrActionStateGetInfo* getInfo,
                                      XrActionStatePose* state) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrSyncActions(XrSession session, const XrActionsSyncInfo* syncInfo) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrEnumerateBoundSourcesForAction(XrSession session,
                                                  const XrBoundSourcesForActionEnumerateInfo* enumerateInfo,
                                                  uint32_t sourceCapacityInput,
                                                  uint32_t* sourceCountOutput,
                                                  XrPath* sources) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrGetInputSourceLocalizedName(XrSession session,
                                               const XrInputSourceLocalizedNameGetInfo* getInfo,
                                               uint32_t bufferCapacityInput,
                                               uint32_t* bufferCountOutput,
                                               char* buffer) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrApplyHapticFeedback(XrSession session,
                                       const XrHapticActionInfo* hapticActionInfo,
                                       const XrHapticBaseHeader* hapticFeedback) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

        XrResult xrStopHapticFeedback(XrSession session, const XrHapticActionInfo* hapticActionInfo) override {
            return XR_ERROR_FUNCTION_UNSUPPORTED;
        }

      private:
        static XrResult _xrGetD3D11GraphicsRequirementsKHR(XrInstance instance,
                                                           XrSystemId systemId,
                                                           XrGraphicsRequirementsD3D11KHR* graphicsRequirements) {
            XrResult result;
            try {
                result = dynamic_cast<OpenXrRuntime*>(GetInstance())
                             ->xrGetD3D11GraphicsRequirementsKHR(instance, systemId, graphicsRequirements);
            } catch (std::exception& exc) {
                Log("xrGetD3D11GraphicsRequirementsKHR: %s\n", exc.what());
                result = XR_ERROR_RUNTIME_FAILURE;
            }

            return result;
        }
    };

    std::unique_ptr<OpenXrRuntime> g_instance = nullptr;

} // namespace

namespace pimax_openxr {
    OpenXrApi* GetInstance() {
        if (!g_instance) {
            g_instance = std::make_unique<OpenXrRuntime>();
        }
        return g_instance.get();
    }

    void ResetInstance() {
        g_instance.reset();
    }

} // namespace pimax_openxr
